Всё до скобки игнорится



Всё после скобки игнорится

ToDo
	+ Чтение
		+ Разбитие на узлы, атрибуты, значения
		+ Сообщения об ошибках
		+ Конвертирование значений
	+ Мето узлы //  Мето_имя [ Данные как строка /] <- игнорируется. закрывающая скобка-> ];
	- Сохранение
	
	~ Тестирование


Всё до скобки игнорится

{

	[
			Multi line
			string meta 
			value
	];
	/*
		Формат поддерживает
			- коментарии
			- объекты 
			- атрибуты
			- значения в виде		
				 array, HEX, BIN, int, float, string (потдерживаются многострочные строки, табы игнорируются если перед табом не стоит \ ), 
				 meta data (в формате Lable[data]),  
				 const( в формате любых имён которые не начинаются с 0-9,-,+,.  константы pi, e, true false, yes no, on off пред определены )
	/**/

	example
	{
		Node = "value";		// Объект без атрибутов, без детей, имеет значение в виде строки value
		"node as 
		raw string value";	// Безимянный объект без атрибутов, без детей, имеет значение в виде строки node as value
		
		Node;				// Безимянный объект без атрибутов, без детей, имеет значение в виде константы Node;

		Node(Atr1 = 10; AtrArray = 12, pi, "ololo"); // Объект без детей, без значения, с двумя атрибутами Atr1 и Atr2 
		Node(10; 12);				// Объект без детей, без значения, с двумя безимянными атрибутами
		Node(Atr1; 12);				// Объект без детей, без значения, с двумя безимянными атрибутами Atr1 является константой

		Error(Atr1 = 10; 12, "some Trash", Some constant) = true, value 10; // Объект без детей, с двумя атрибутами Atr1 и безимянным атрибутом равному 12, и значением равным true
		(Atr1 = 10; 12) = true;		// Безимянный объект без детей, с двумя атрибутами Atr1 и безимянным атрибутом равному 12, и значением равным true

		true, PI, "array"; // Безимянный объект без атрибутов, без детей, имеет значение в виде массива

		Node// ; на конце писать не нужно
		{
			// Дети
			Node(Atr1 = 10000; 12) = yes;
			Node(Atr1 = 10; 12) = true;

			Node(Atr1 = 10; 12) = true
			{
				// Дети
				Meta Node = url
							[
								http://www.youtube.com/watch?
								v=K1qDTx5qlgA&
								index=88&
								list=UUVPYbobPRzz0SjinWekjUBw
							]
			}
		}

		(Atr1 = 10; 12) = true, PI, "array" // Безимянный объект с двумя атрибутами Atr1 и безимянным атрибутом равному 12, и значением равным массиву
		{
			// Дети
		}

	}
	
	matrix =
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		1, 1, 1, 0;

	Scene = Start Location
	{
		m_Objects
		{
			MainCharacter(Inh = Sam Fisher)
			{
				m_Positions = 0, 0, 100;
				m_Rotation = 0, 0, 0;
				m_Scale = 1, 1, 1;

				m_Components
				{
					m_Game Play;
				}
			}
		
			Camera(Inh = StandartCamera) 
			{
				m_Positions = 0, 0, 100;
				m_Rotation = 0, 0, 0;
				m_Scale = 1, 1, 1;
			
				m_Components
				{
					Follow 
					{
						m_Follow = Scene.MainCharacter:HeadBone;
						m_Distance = 100;
					}
					
					Collider(Type = Sphere)
					{
						m_Radius = 100;
						m_Type = Dynamic;
					}
				}
			}
		}
	}
	
	
} 

Всё после скобки игнорится

ToDo
	+ Чтение
		+ Разбитие на узлы, атрибуты, значения
		+ Сообщения об ошибках
		+ Конвертирование значений
	+ Мето узлы //  Мето_имя [ Данные как строка /] <- игнорируется. закрывающая скобка-> ];
	- Сохранение
	
	~ Тестирование
